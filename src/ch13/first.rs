// 借用检查

// Rust 实现了无性能损失的“内存安全”
// Rust 语言的核心特点是：在没有放弃对内存的直接控制力的情况下，实现了内存安全。
// 所谓对内存的直接控制能力，即可以自行决定内存布局，包括在栈上分配内存，
// 和在堆上分配内存；支持指针类型；可以对一个变量实施取地址操作；
// 有确定性的内存释放；等等。
// 另一方面，从安全性的角度来说，可以看到，
// Rust 有所有权概念、借用指针、生命周期分析等这些内容。
// Rust 语言的这一系列安全规则，背后的指导思想是什么呢？
// 总的来说，Rust 的设计者们在一系列的“内存不安全”的问题中观察到了一个结论：
// Danger arise from Aliasing + Mutation
// 1. Alias 的意思是“别名”。
//    如果一个变量可以通过多种 Path 来访问，那它们就可以互相看作 alias。
//    Alias 意味着“共享”，即有多个入口可以访问同一块内存。
// 2. Mutation 的意思是“改变”。如果通过某个变量修改了一块内存，就是发生了 mutation。
//    Mutation 意味着拥有“修改”权限，即可以写入数据。
// Rust 保证内存安全的一个重要原则就是，
// 如果能保证 alias 和 mutation 不同时出现，那么代码就一定是安全的。
// 一言以蔽之：共享不可变，可变不共享
pub fn first() {}

// 编译错误示例
pub fn second() {
    fn test1() {
    }
    test1();
}